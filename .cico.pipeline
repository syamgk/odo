def onmyduffynode(script){
    ansiColor('xterm'){
        timestamps{
            sh 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root ${DUFFY_NODE}.ci.centos.org -t "' + script + '"'
        }
    }
}

def syncfromduffynode(rsyncpath){
    sh 'rsync -e "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root " -Ha --include=' +  rsyncpath +  " ${DUFFY_NODE}.ci.centos.org:~/ ./"
}

def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus =  buildStatus ?: 'SUCCESSFUL'
    emailext attachmentsPattern: 'odo/*.log', body: "See: ${env.BUILD_URL}", subject: "[${env.JOB_NAME}] Build #${env.BUILD_NUMBER}: ${buildStatus}", to: 'sgk@redhat.com'
}

node('odo') {

    stage('Allocate Node'){
        env.CICO_API_KEY = readFile("${env.HOME}/duffy.key").trim()
        duffy_rtn=sh(
            script: 'cico --debug node get -f value -c hostname -c comment',
            returnStdout: true
            ).trim().tokenize(' ')
        env.DUFFY_NODE=duffy_rtn[0]
        env.SSID=duffy_rtn[1]
    }

    try{
        stage('Pre Setup Node'){
            onmyduffynode ''''yum -y install git &&
            wget https://dl.google.com/go/go1.11.2.linux-amd64.tar.gz &&
            tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz &&
            export PATH=$PATH:/usr/local/go/bin'''
        }


        stage('git clone Tests') {
            onmyduffynode '''git clone "https://github.com/redhat-developer/odo.git" && ls -la'''
        }

        stage('Build binary') {
            onmyduffynode '''cd odo && make'''
        }

        stage('Unit Test') {
            onmyduffynode '''cd odo &&
            make test >> unit_test.log
            '''
        }

    }catch (e){
        currentBuild.result = "FAILED"
        throw e 
    } finally {
        try {
            stage('Archive the Logs'){
                syncfromduffynode('*.log')
                archiveArtifacts('odo/*.log')
            }
        } catch (e){
            currentBuild.result = "FAILED"
            throw e
        } finally {
            stage('Deallocate Node'){
                sh 'cico node done ${SSID}'
            }
            stage('Notify Recipients'){
                notifyBuild(currentBuild.result)
            }
        }
    }
}
