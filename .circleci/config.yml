version: 2

# this circle ci config is Inspired by minishift's scripts
# https://github.com/minishift/minishift/blob/cfc599cffdc41d31b207f7cfd40190be6b86b858/.circleci/config.yml
# and an orb defined at https://github.com/snowdrop/circleci-orbs for provisioning the oc cluster

jobs:
  build:
    machine: true
    environment:
      GOVERSION: 1.11.4
    working_directory: ~/go/src/github.com/redhat-developer/odo

    steps:
    - checkout
    - run:
        name: Settingup machine with golang
        command: |
            echo 'export GOPATH=$HOME/go' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:/usr/local/go/bin/:$PATH' >> $BASH_ENV
            sudo rm -rf /usr/local/go
            curl https://storage.googleapis.com/golang/go${GOVERSION}.linux-amd64.tar.gz | sudo tar -C /usr/local -xz
            go env
            mkdir -p $GOPATH/bin

    - run: 
        name: Build Binary
        command: |
            go version
            env
            cd $GOPATH/src/github.com/redhat-developer/odo
            make goget-tools
            make
            sudo cp odo /usr/bin
    #    
    #    - run: 
    #        name: oc cluster up
    #        command: |
    #            pwd
    #            cd $GOPATH/src/github.com/redhat-developer/odo
    #            pwd
    #            ls
    #            ./scripts/oc-cluster.sh service-catalog
    #
    - run:
        name: "Download, install okd, kubectl tools, launch okd and grant cluster admin role for the admin user"
        command: |
            kube_version=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
            curl -LO https://storage.googleapis.com/kubernetes-release/release/${kube_version}/bin/linux/amd64/kubectl && \
                chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            echo "Installed kubectl CLI tool"
            oc_tool_version="openshift-origin-server-v3.11.0-0cbc58b-linux-64bit"
            curl -LO https://github.com/openshift/origin/releases/download/v3.11.0/${oc_tool_version}.tar.gz && \
                tar -xvzf ${oc_tool_version}.tar.gz && chmod +x $PWD/${oc_tool_version}/oc && sudo mv $PWD/${oc_tool_version}/oc /usr/local/bin/ && \
                rm -rf ${oc_tool_version}.tar.gz
            echo "Installed OC CLI tool"
            tmp=`mktemp`
            echo 'DOCKER_OPTS="$DOCKER_OPTS --insecure-registry 172.30.0.0/16 --insecure-registry registry.access.redhat.com"' > ${tmp}
            sudo mv ${tmp} /etc/default/docker
            sudo mount --make-shared /
            sudo service docker restart
            echo "Configured Docker daemon with insecure-registry"
            sudo mkdir -p /var/lib/origin/openshift.local.clusterup/ && sudo chown -R circleci:circleci /var/lib/origin/openshift.local.clusterup/
            oc cluster up --base-dir=/var/lib/origin/openshift.local.clusterup/
            sleep 10
            oc login -u system:admin
            oc adm policy add-cluster-role-to-user cluster-admin admin
            echo "Configured OpenShift cluster : v3.11.0"
            echo "Switching to regular user"
            oc login -u developer -p developer
            mkdir .kube-template
            cp -rfv ${HOME}/.kube/* .kube-template 
            
    - run: 
        name: Main e2e test
        command: |
            cd ${HOME}/go/src/github.com/redhat-developer/odo
            mkdir ${HOME}/.kube/main-e2e
            cp -rfv .kube-template ${HOME}/.kube/main-e2e
            export KUBECONFIG="$HOME/.kube/main-e2e/config"
            oc login localhost:8443 -u main-e2e -p main-e2e --insecure-skip-tls-verify=true
            odo project create test-main-e2e
            make test-main-e2e 
        background: true
            
    - run: 
        name: Java e2e test
        command: |
            cd ${HOME}/go/src/github.com/redhat-developer/odo
            mkdir ${HOME}/.kube/java-e2e
            cp -rfv .kube-template ${HOME}/.kube/java-e2e
            export KUBECONFIG="$HOME/.kube/java-e2e/config"
            oc login localhost:8443 -u java-e2e -p java-e2e --insecure-skip-tls-verify=true
            odo project create test-java-e2e
            make test-java-e2e
        background: true

    - run: 
        name: Source e2e test
        command: |
            cd ${HOME}/go/src/github.com/redhat-developer/odo
            mkdir ${HOME}/.kube/source-e2e
            cp -rfv .kube-template ${HOME}/.kube/source-e2e
            export KUBECONFIG="$HOME/.kube/source-e2e/config"
            oc login localhost:8443 -u source-e2e -p source-e2e --insecure-skip-tls-verify=true
            odo project create test-source-e2e
            make test-source-e2e
        background: true

    - run: 
        name: JSON e2e test
        command: |
            cd ${HOME}/go/src/github.com/redhat-developer/odo
            mkdir ${HOME}/.kube/json-e2e
            cp -rfv .kube-template ${HOME}/.kube/json-e2e
            export KUBECONFIG="$HOME/.kube/json-e2e/config"
            oc login localhost:8443 -u json-e2e -p json-e2e --insecure-skip-tls-verify=true
            odo project create json-e2e
            make test-json-format-output
        background: true

    - run: 
        name: Component e2e test
        command: |
            cd ${HOME}/go/src/github.com/redhat-developer/odo
            mkdir ${HOME}/.kube/cmp-e2e
            cp -rfv .kube-template ${HOME}/.kube/cmp-e2e
            export KUBECONFIG="$HOME/.kube/cmp-e2e/config"
            oc login localhost:8443 -u cmp-e2e -p cmp-e2e --insecure-skip-tls-verify=true
            odo project create test-cmp-e2e
            sleep 20s && ls -R ~/.kube/
            make test-cmp-e2e
     

    #    - run: 
    #        name: Service-Catalog e2e tests
    #        command: |
    #            cd ${HOME}/go/src/github.com/redhat-developer/odo
    #            make test-service-e2e
    #
    #    - run:
    #        name: Watch e2e tests
    #        command: |
    #            cd ${HOME}/go/src/github.com/redhat-developer/odo
    #            make test-watch-e2e TIMEOUT=1200s
    #
    #    - run:
    #        name: Link e2e tests
    #        command: |
    #            cd ${HOME}/go/src/github.com/redhat-developer/odo
    #            make test-link-e2e
    #  
    #  - run: 
    #      name: JSON e2e test
    #      command: |
    #          cd ${HOME}/go/src/github.com/redhat-developer/odo
    #          make test-json-format-output
    #  - run: 
    #      name: Login e2e test
    #      command: |
    #          cd ${HOME}/go/src/github.com/redhat-developer/odo
    #          make test-odo-login-e2e
